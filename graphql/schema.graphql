type AwesomeProfile {
  id: Int!
  numKnown: Int!
  numCorrect: Int!
  numIncorrect: Int!
  totalPercentage: Float!
  name: String!
  smallestVocab: Int!
}


type Challenge {
  vocabId: Int!
  vocabStudyId: Int!
  firstLang: String!
  infinitive: String!
  pos: String!
  hint: String!
  numLearningWords: Int!
  userNotes: String!
  correctAttempts: Int!
  knownLangCode: String!
  learningLangCode: String!
}




type MutationRoot {
  """
  Checks the user's response for a given vocabulary study session.

  This function compares the user's entered response against the correct answer for the specified vocabulary.
  It leverages the `VocabFuzzyMatch` service to assess the accuracy of the response and provides feedback.

  # Arguments

  * `vocab_id` - The identifier of the vocabulary item being studied.
  * `vocab_study_id` - The identifier of the vocab study session, linking the user and the vocab item.
  * `entered` - The response entered by the user for the vocabulary item.

  # Returns

  Returns a `Result<String>` where:
  - `Ok(String)` contains the feedback or prompt based on the comparison of the entered response and the correct answer.
  - `Err` contains an error message if the operation fails.
  """
  checkResponse(vocabId: Int!, vocabStudyId: Int!, entered: String!): String!
}

type QueryRoot {
  """
  Fetches a list of vocab study challenges for a specified awesome person.

  This async function retrieves a set of vocab words for the awesome person to study,
  limited by the specified `limit`. Each challenge includes a prompt generated based
  on the vocab word and any user notes associated with the vocab study.

  # Arguments

  * `awesome_id` - The ID of the awesome person for whom to fetch the study challenges.
  * `limit` - The maximum number of challenges to return.

  # Returns

  A `Result` containing a vector of `Challenge` structs on success, or an error message string on failure.
  Each `Challenge` struct includes the vocab ID, vocab study ID, and the generated prompt.
  """
  getStudyList(awesomeId: Int!, limit: Int!): [Challenge!]!
  """
  Retrieves detailed profile information for an awesome person by their ID.

  This async function queries the database for the specified awesome person's data,
  including their learning statistics and basic profile details. If the awesome person
  cannot be found, it returns default values for each field.

  # Arguments

  * `awesome_id` - The unique identifier of the awesome person whose profile is being requested.

  # Returns

  A `Result` wrapping an `AwesomeProfile` struct containing the awesome person's data on success,
  or an error message string on failure.
  """
  getAwesomePerson(awesomeId: Int!): AwesomeProfile!
  """
  Retrieves statistical information for a specific vocabulary study session by its ID.

  This async function looks up the study session for a particular vocabulary word and compiles
  key statistics about the user's attempts, successes, and overall performance with that word.
  It also includes the last tested time for the vocabulary, formatted as a readable string.

  # Arguments

  * `vocab_study_id` - The unique identifier of the vocabulary study session.

  # Returns

  A `Result` wrapping a `VocabStats` struct containing detailed statistics about the study session on success,
  or an error string on failure.
  """
  getVocabStats(vocabStudyId: Int!): VocabStats!
}


type VocabStats {
  learning: String!
  attempts: Int!
  correctAttempts: Int!
  percentageCorrect: Float!
  lastChange: Float!
  lastTested: String!
}

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
schema {
  query: QueryRoot
  mutation: MutationRoot
}
